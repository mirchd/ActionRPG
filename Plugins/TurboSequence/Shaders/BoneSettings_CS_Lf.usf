// Copyright Lukas Fratzl, 2022-2024. All Rights Reserved.

#include "/Engine/Public/Platform.ush"

StructuredBuffer<float4> BoneWeights_StructuredBuffer;

RWTexture2DArray<float4> RW_Settings_OutputTexture;

uint TextureDimensionX;
uint TextureDimensionY;
uint NumPixelPerThread;
uint BaseIndex;


uint3 GetDimensionsFromIndex3D(in uint Index, in uint TextureSizeX, in uint TextureSizeY)
{
	uint TexPow = TextureSizeX * TextureSizeY;
	uint SliceBase = Index % TexPow;
	return uint3(SliceBase % TextureSizeX, SliceBase / TextureSizeY, Index / TexPow);
}


[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void Main(
	uint GroupIndex : SV_GroupIndex)
{
	uint OffsetX = GroupIndex * NumPixelPerThread;
	uint OffsetY = OffsetX + NumPixelPerThread;

	for (uint Index = OffsetX; Index < OffsetY; ++Index)
	{
		uint TextureIndex = BaseIndex + Index;

		RW_Settings_OutputTexture[GetDimensionsFromIndex3D(TextureIndex, TextureDimensionX, TextureDimensionY)] =
			BoneWeights_StructuredBuffer[Index];
	}
}
